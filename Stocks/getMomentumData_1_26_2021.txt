def getMomentumData(t,td_ameritrade_key):
    ticker = t['ticker']
    #create URL for CNBC
    cnbc_url = 'https://www.cnbc.com/quotes/?symbol={0}'
    url = cnbc_url.format(ticker)
    #submit GET request
    r = requests.get(url)
    #Digest HTML via BeautifulSoup
    soup = BeautifulSoup(r.content,'lxml')

    #with html now as an object, get data
    yearHigh = float(soup.find('span','year high').contents[0])
    closePrice = float(soup.find('span','last original').contents[0])
    percentFromHigh = closePrice/yearHigh
    #Use TD Ameritrade API to get price history for ticker
    priceHistory = get_price_history(td_ameritrade_key,symbol=ticker, period=6, periodType='month', frequencyType='daily')
    
    
    i = len(priceHistory['candles'])-1
    j = i-100
    k = j-10
    #Calculate 20 week ROC (HL/2)
    if i>110:
        numerator = ((priceHistory['candles'][i]['high'] + priceHistory['candles'][i]['low']))/2
        denominator = ((priceHistory['candles'][j]['high'] + priceHistory['candles'][j]['low'])+(priceHistory['candles'][k]['high'] + priceHistory['candles'][k]['low']))/4
        roc = numerator/denominator
        hv = historicalVolatility(priceHistory,101,'dd')
    else:
        roc = -1.0
        hv = 0.0

    #append scrapped data into data list to be stored in db later
    d = []
    for sID in t['fkStrategyID']:
        d.append({'Ticker':ticker,'closePrice':closePrice,'yearHigh':yearHigh,'percentFromHigh':percentFromHigh,'sixMonthReturn':roc,'historicalVolatility':hv,'fkPortfolioStrategyID':sID})
    time.sleep(1)
    return d

#function webscrapes 52-High data and calls get_price_history to calc 20 week HL/2 ROC
def get_momentum_data(tickers, data = []):
    key =  getData("SELECT [keyValue] FROM [fattailinvestorweb].[dbo].[tblAPIKeys] where pkAPIID = 1")
    td_ameritrade_key = key['keyValue'][0]
    #create list to hold dictionary values
    d = data
    #create list to hold errors
    errors = []
    tickers = [t for t in tickers if t['isUpdated'] == 0]
    for t in tickers:
        try:
            print("Collecting for " + t['ticker'])
            for n in getMomentumData(t,td_ameritrade_key):
                d.append(n)
            t['isUpdated'] = 1
        except:
            try:
                time.sleep(5)
                print("** SECOND TRY FOR " + t['ticker']) + " ***"
                for n in getMomentumData(t,td_ameritrade_key):
                    d.append(n)
                t['isUpdated'] = 1
            except:
                print('*** FAILED FOR ' + t['ticker']) + " ***"
                pass
            
    print("Collecting Complete!")
    return d